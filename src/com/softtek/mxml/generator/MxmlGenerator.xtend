/*
 * generated by Xtext 2.19.0
 */
package com.softtek.mxml.generator

import com.softtek.mxml.mxml.ComplexNode
import com.softtek.mxml.mxml.Node
import java.util.LinkedHashMap
import java.util.LinkedHashSet
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.softtek.mxml.utils.State

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MxmlGenerator extends AbstractGenerator {
  HtmlGenerator htmlGenerator= new HtmlGenerator()
  PugGenerator pugGenerator= new PugGenerator()
  JsonResourceGenerator jsonResourceGenerator= new JsonResourceGenerator()
  AppComponentListGenerator appComponentListGenerator = new AppComponentListGenerator()  
  JsStateGenerator jsStateGenerator = new JsStateGenerator()
  
  var LinkedHashMap<String,LinkedHashSet<State>> appStates;	

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		appStates = new LinkedHashMap<String,LinkedHashSet<State>>()
		appStates = State.getAppStates(resource)	
		pugGenerator.doGenerator(resource,fsa, appStates)	
//		appComponentListGenerator.doGenerator(resource,fsa) 
		jsonResourceGenerator.doGenerator(resource,fsa)	
		if(appStates !== null && !appStates.empty){
			jsStateGenerator.doGenerator(fsa, appStates)
		}		 
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
		
	def void printNodes(Node n, LinkedHashMap<String, LinkedHashSet<String>> app){
		if (n instanceof ComplexNode)
			  { 
			  	println("Complex:"+n.name)
			  	var innernode = n as ComplexNode 
			  	for(i: innernode.nodes){			  	
			  		printNodes(i, app)
			  	}
			  	println("Complex:/"+n.name)
		}
		else
			println("Simple:"+n.name)	
	}
	
		
}
